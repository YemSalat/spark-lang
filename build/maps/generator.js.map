{"version":3,"sources":["node_modules/browser-pack/_prelude.js","generator.js","src/generator/generator.js","src/generator/modules/GeneratorUtil.js","src/generator/modules/IndentManager.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","global","indentManager","util","__generateNode","node","method","mType","pNode","evaluate","error","CompilerError","message","location","DOCSTRING","body","join","VARIABLE_STATEMENT","result","generateType","type","decs","declarations","item","varPostfix","push","id","init","VARIABLE_DECLARATOR","FUNCTION_DECLARATION","doc","name","fnParams","params","prm","PARAM_DECLARATOR","generateVarDecalaration","RETURN_STATEMENT","argument","CALL_STATEMENT","FOR_STATEMENT","test","update","BREAK_STATEMENT","CONTINUE_STATEMENT","EXPRESSION_STATEMENT","expression","IDENTIFIER","LITERAL","value","BINARY_EXPRESSION","left","operator","right","ASSIGNMENT_STATEMENT","BLOCK_STATEMENT","increase","forEach","getCurrentIndent","decrease","PROGRAM","match","IF_STATEMENT","consequent","alternate","LOGICAL_EXPRESSION","UPDATE_EXPRESSION","prefix","UNARY_EXPRESSION","api","parse","tree","trim","SparkGenerator","this","self","window","./modules/GeneratorUtil","./modules/IndentManager",2,"typeMap","byte","ubyte","int","uint","long","ulong","float","str","void","typeDescriptors","isArray","isString","generateVarDeclaration","hasOwnProperty","td",3,"indentLevel","indentChar","currentIndent","Array"],"mappings":"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","file":"generator.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\nmodule.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var indentManager = require('./modules/IndentManager');\n  var util = require('./modules/GeneratorUtil');\n\n  // :: OP\n  var __generateNode = function(node, method) {\n    if (node === null) {\n      return '';\n    }\n    var mType = method || node['$$'];\n    var pNode = evaluate[mType](node)\n    if (pNode.error) {\n      throw new CompilerError('SemanticError', pNode.error.message, pNode.error.location);\n    }\n    return pNode;\n  };\n\n  // :: GENERATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return '// ' + node.body.join('\\n// ') + '\\n';\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var result = util.generateType(node.type) + ' ';\n\n      var decs = [];\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        \n        var varPostfix = '';\n        if (item.type === 'str') {\n          varPostfix = '[]';\n        }\n        decs.push( __generateNode(item.id) + varPostfix );\n\n        if (item.init) {\n\n          decs.push( ' = ' + __generateNode(item.init) );\n        }\n      }\n\n      result += decs.join(', ');\n\n      return result;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var result = ''\n      if (node.doc) {\n        result += __generateNode(node.doc);\n      }\n\n      result += node.type + ' ' + node.id.name + ' ( ';\n\n      var fnParams = [];\n      for (var i=0, l=node.params.length; i<l; i++) {\n        var prm = __generateNode(node.params[i]);\n        fnParams.push(prm);\n      }\n\n      result += fnParams.join(', ');\n\n      result += ' ) '\n\n      // parse function body\n      result += __generateNode(node.body);\n      \n      return result;\n    },\n    PARAM_DECLARATOR: function (node) {\n\n      var result = util.generateVarDecalaration(node);\n      return result;\n    },\n    RETURN_STATEMENT: function (node) {\n      var result = 'return ' + __generateNode(node.argument);\n      return result;\n    },\n    CALL_STATEMENT: function (node) {\n      var result = node.name;\n      return result;\n    },\n\n\n    FOR_STATEMENT: function (node) {\n      var result = 'for (';\n      result += __generateNode(node.init) + ' ; ';\n      result += __generateNode(node.test) + ' ; ';\n      result += __generateNode(node.update) + ' )';\n      result += __generateNode(node.body);\n      return result;\n    },\n\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var result = __generateNode(node.expression);\n      return result;\n    },\n\n    IDENTIFIER: function (node) {\n      return node.name;\n    },\n\n    LITERAL: function(node) {\n      var result = node.value;\n      if (node.type === 'str') {\n        result = '\"' + result + '\"';\n      }\n      return result;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      var result = '';\n      // eval left and right parts first\n      result += __generateNode(node.left);\n      result += ' ' + node.operator + ' ';\n      result += __generateNode(node.right);\n      return result;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      var result = __generateNode(node.left);\n      // eval asignment right hand side\n      result += ' = ' + __generateNode(node.right);\n      return result;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      var result = ' {\\n';\n\n      indentManager.increase();\n\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item) + ';\\n';\n      });\n\n      indentManager.decrease();\n      \n      result += '}\\n';\n\n      return result;\n    },\n\n    PROGRAM: function (node) {\n      var result = '';\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item);\n        if (!result.match(/\\}[\\s]*$/)) {\n          result += ';';\n        }\n        result += '\\n';\n      });\n      \n      return result;\n    },\n\n    IF_STATEMENT: function (node) {\n\n      var result = 'if ( ';\n\n      result += __generateNode(node.test);\n\n      result += ' )';\n      \n      result += __generateNode(node.consequent);\n\n      if (node.alternate) {\n      result += 'else ';\n        result += __generateNode(node.alternate);\n      }\n      return result;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      var result = __generateNode(node.left) + ' ' + node.operator + ' ' + __generateNode(node.right);\n      return result;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      var result = '';\n      if (node.prefix) {\n        result += node.operator + __generateNode(node.argument);\n      }\n      else {\n        result += __generateNode(node.argument) + node.operator;\n      }\n      return result;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      var result = node.operator + '';\n      result += __generateNode(node.argument);\n      return result;\n    }\n\n  };\n\n  var api = {\n    parse: function (tree) {\n\n      var code = __generateNode(tree);\n      return code.trim();\n    }\n  };\n  // :: SPARK GENERATOR\n  global.SparkGenerator = api;\n  return api;\n\n})();\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./modules/GeneratorUtil\":2,\"./modules/IndentManager\":3}],2:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: UTIL\n  'use strict';\n\n  var typeMap = {\n    'byte'  : 'char',\n    'ubyte' : 'unsigned char',\n    'int'   : 'int',\n    'uint'  : 'unsigned int',\n    'long'  : 'long',\n    'ulong' : 'unsigned long',\n    'float' : 'float',\n    'str'   : 'char',\n    'void'  : 'void',\n  };\n\n  var typeDescriptors = {\n    'str' : {\n      isArray: true,\n      isString: true\n    }\n  }\n\n  var api = {\n    generateType: function (type) {\n      return typeMap[type] || type;\n    },\n\n    generateVarDeclaration: function (node) {\n      var type = api.generateType(node.type);\n      var name = node.id.name;\n      if (typeDescriptors.hasOwnProperty(node.type)) {\n        var td = typeDescriptors[node.type];\n        if (td.isArray) {\n          return type + ' ' + name + '[]';\n        }\n      }\n      return type + ' ' + name;\n    } \n  };\n\n  // :: EXPORT\n  return api;\n\n})();\n},{}],3:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: INDENT MANAGER\n  'use strict';\n\n  var indentLevel = 0;\n  var indentChar = '  ';\n  var currentIndent = '';\n\n  var api = {\n    getCurrentIndent: function () {\n      return currentIndent;\n    },\n    increase: function () {\n      indentLevel += 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    },\n    decrease: function () {\n      indentLevel -= 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    }\n  }\n\n  // :: EXPORT\n  return api;\n\n})();\n},{}]},{},[1])\n\n","module.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var indentManager = require('./modules/IndentManager');\n  var util = require('./modules/GeneratorUtil');\n\n  // :: OP\n  var __generateNode = function(node, method) {\n    if (node === null) {\n      return '';\n    }\n    var mType = method || node['$$'];\n    var pNode = evaluate[mType](node)\n    if (pNode.error) {\n      throw new CompilerError('SemanticError', pNode.error.message, pNode.error.location);\n    }\n    return pNode;\n  };\n\n  // :: GENERATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return '// ' + node.body.join('\\n// ') + '\\n';\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var result = util.generateType(node.type) + ' ';\n\n      var decs = [];\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        \n        var varPostfix = '';\n        if (item.type === 'str') {\n          varPostfix = '[]';\n        }\n        decs.push( __generateNode(item.id) + varPostfix );\n\n        if (item.init) {\n\n          decs.push( ' = ' + __generateNode(item.init) );\n        }\n      }\n\n      result += decs.join(', ');\n\n      return result;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var result = ''\n      if (node.doc) {\n        result += __generateNode(node.doc);\n      }\n\n      result += node.type + ' ' + node.id.name + ' ( ';\n\n      var fnParams = [];\n      for (var i=0, l=node.params.length; i<l; i++) {\n        var prm = __generateNode(node.params[i]);\n        fnParams.push(prm);\n      }\n\n      result += fnParams.join(', ');\n\n      result += ' ) '\n\n      // parse function body\n      result += __generateNode(node.body);\n      \n      return result;\n    },\n    PARAM_DECLARATOR: function (node) {\n\n      var result = util.generateVarDecalaration(node);\n      return result;\n    },\n    RETURN_STATEMENT: function (node) {\n      var result = 'return ' + __generateNode(node.argument);\n      return result;\n    },\n    CALL_STATEMENT: function (node) {\n      var result = node.name;\n      return result;\n    },\n\n\n    FOR_STATEMENT: function (node) {\n      var result = 'for (';\n      result += __generateNode(node.init) + ' ; ';\n      result += __generateNode(node.test) + ' ; ';\n      result += __generateNode(node.update) + ' )';\n      result += __generateNode(node.body);\n      return result;\n    },\n\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var result = __generateNode(node.expression);\n      return result;\n    },\n\n    IDENTIFIER: function (node) {\n      return node.name;\n    },\n\n    LITERAL: function(node) {\n      var result = node.value;\n      if (node.type === 'str') {\n        result = '\"' + result + '\"';\n      }\n      return result;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      var result = '';\n      // eval left and right parts first\n      result += __generateNode(node.left);\n      result += ' ' + node.operator + ' ';\n      result += __generateNode(node.right);\n      return result;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      var result = __generateNode(node.left);\n      // eval asignment right hand side\n      result += ' = ' + __generateNode(node.right);\n      return result;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      var result = ' {\\n';\n\n      indentManager.increase();\n\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item) + ';\\n';\n      });\n\n      indentManager.decrease();\n      \n      result += '}\\n';\n\n      return result;\n    },\n\n    PROGRAM: function (node) {\n      var result = '';\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item);\n        if (!result.match(/\\}[\\s]*$/)) {\n          result += ';';\n        }\n        result += '\\n';\n      });\n      \n      return result;\n    },\n\n    IF_STATEMENT: function (node) {\n\n      var result = 'if ( ';\n\n      result += __generateNode(node.test);\n\n      result += ' )';\n      \n      result += __generateNode(node.consequent);\n\n      if (node.alternate) {\n      result += 'else ';\n        result += __generateNode(node.alternate);\n      }\n      return result;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      var result = __generateNode(node.left) + ' ' + node.operator + ' ' + __generateNode(node.right);\n      return result;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      var result = '';\n      if (node.prefix) {\n        result += node.operator + __generateNode(node.argument);\n      }\n      else {\n        result += __generateNode(node.argument) + node.operator;\n      }\n      return result;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      var result = node.operator + '';\n      result += __generateNode(node.argument);\n      return result;\n    }\n\n  };\n\n  var api = {\n    parse: function (tree) {\n\n      var code = __generateNode(tree);\n      return code.trim();\n    }\n  };\n  // :: SPARK GENERATOR\n  global.SparkGenerator = api;\n  return api;\n\n})();","module.exports = (function () {\n  // :: UTIL\n  'use strict';\n\n  var typeMap = {\n    'byte'  : 'char',\n    'ubyte' : 'unsigned char',\n    'int'   : 'int',\n    'uint'  : 'unsigned int',\n    'long'  : 'long',\n    'ulong' : 'unsigned long',\n    'float' : 'float',\n    'str'   : 'char',\n    'void'  : 'void',\n  };\n\n  var typeDescriptors = {\n    'str' : {\n      isArray: true,\n      isString: true\n    }\n  }\n\n  var api = {\n    generateType: function (type) {\n      return typeMap[type] || type;\n    },\n\n    generateVarDeclaration: function (node) {\n      var type = api.generateType(node.type);\n      var name = node.id.name;\n      if (typeDescriptors.hasOwnProperty(node.type)) {\n        var td = typeDescriptors[node.type];\n        if (td.isArray) {\n          return type + ' ' + name + '[]';\n        }\n      }\n      return type + ' ' + name;\n    } \n  };\n\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: INDENT MANAGER\n  'use strict';\n\n  var indentLevel = 0;\n  var indentChar = '  ';\n  var currentIndent = '';\n\n  var api = {\n    getCurrentIndent: function () {\n      return currentIndent;\n    },\n    increase: function () {\n      indentLevel += 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    },\n    decrease: function () {\n      indentLevel -= 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    }\n  }\n\n  // :: EXPORT\n  return api;\n\n})();"],"sourceRoot":"/source/"}