{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/common/DEFAULT_FUNCTIONS.js","generator.js","src/generator/generator.js","src/generator/modules/GeneratorUtil.js","src/generator/modules/IndentManager.js","src/generator/modules/UseWatcher.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","DEFAULT_FUNCTIONS","millis","pinRead","pinWrite","pinMode","print","printn",2,"global","useWatcher","indentManager","util","__generateNode","node","method","mType","pNode","evaluate","error","CompilerError","message","location","__preProcess","result","isUsed","__postProcess","trim","replace","api","parse","tree","console","log","getUses","DOCSTRING","body","join","VARIABLE_STATEMENT","generateType","type","decs","declarations","item","curDec","varPostfix","id","init","push","VARIABLE_DECLARATOR","FUNCTION_DECLARATION","doc","name","fnParams","params","prm","PARAM_DECLARATOR","generateVarDecalaration","RETURN_STATEMENT","argument","CALL_STATEMENT","fName","callee","hasOwnProperty","add","args","curArg","FOR_STATEMENT","test","update","BREAK_STATEMENT","CONTINUE_STATEMENT","EXPRESSION_STATEMENT","expression","IDENTIFIER","LITERAL","value","BINARY_EXPRESSION","left","operator","right","ASSIGNMENT_STATEMENT","BLOCK_STATEMENT","increase","forEach","getCurrentIndent","decrease","PROGRAM","match","IF_STATEMENT","consequent","alternate","LOGICAL_EXPRESSION","UPDATE_EXPRESSION","prefix","UNARY_EXPRESSION","SparkGenerator","this","self","window","./../common/DEFAULT_FUNCTIONS","./modules/GeneratorUtil","./modules/IndentManager","./modules/UseWatcher",3,"typeMap","byte","ubyte","int","uint","long","ulong","float","str","void","typeDescriptors","isArray","isString","generateVarDeclaration","td",4,"indentLevel","indentChar","currentIndent","Array",5,"uses","func","indexOf","reset"],"mappings":"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","file":"generator.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var DEFAULT_FUNCTIONS = {\n    millis: 'millis',\n    pinRead: 'digitalRead',\n    pinWrite: 'digitalWrite',\n    pinMode: 'pinMode',\n    print: 'Serial.print',\n    printn: 'Serial.println'\n  };\n\n  return DEFAULT_FUNCTIONS;\n\n})();","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var DEFAULT_FUNCTIONS = {\n    millis: 'millis',\n    pinRead: 'digitalRead',\n    pinWrite: 'digitalWrite',\n    pinMode: 'pinMode',\n    print: 'Serial.print',\n    printn: 'Serial.println'\n  };\n\n  return DEFAULT_FUNCTIONS;\n\n})();\n},{}],2:[function(require,module,exports){\n(function (global){\nmodule.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var useWatcher = require('./modules/UseWatcher');\n  var indentManager = require('./modules/IndentManager');\n  var util = require('./modules/GeneratorUtil');\n\n  // :: CONSTANTS\n  var DEFAULT_FUNCTIONS = require('./../common/DEFAULT_FUNCTIONS');\n\n  // :: OP\n  var __generateNode = function (node, method) {\n    if (node === null) {\n      return '';\n    }\n    var mType = method || node['$$'];\n    var pNode = evaluate[mType](node)\n    if (pNode.error) {\n      throw new CompilerError('SemanticError', pNode.error.message, pNode.error.location);\n    }\n    return pNode;\n  };\n\n  var __preProcess = function (code) {\n    var result = '';\n    // @TODO: Refactor\n    if (useWatcher.isUsed('print') || useWatcher.isUsed('println')) {\n      result = 'Serial.begin( 9600 );\\n\\n';\n    }\n\n    result = result + code;\n\n    return result;\n  };\n\n  var __postProcess = function (code) {\n    var result = code.trim().replace(/(?!^)[ ]+/igm, ' ');\n    return result;\n  };\n\n  // :: VARS\n\n  // :: API\n  var api = {\n    parse: function (tree) {\n      var code;\n      \n      code = __generateNode(tree);\n      code = __preProcess(code);\n      code = __postProcess(code);\n\n      console.log('USED FUNCSTIONS:');\n      console.log(useWatcher.getUses());\n\n      return code;\n    }\n  };\n\n  // :: GENERATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return '// ' + node.body.join('\\n// ') + '\\n';\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var result = util.generateType(node.type) + ' ';\n\n      var decs = [];\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        var curDec = '';\n        \n        var varPostfix = '';\n        if (item.type === 'str') {\n          varPostfix = '[]';\n        }\n        curDec += __generateNode(item.id) + varPostfix;\n\n        if (item.init) {\n\n          curDec += ' = ' + __generateNode(item.init);\n        }\n\n        decs.push( curDec );\n      }\n\n      result += decs.join(', ');\n\n      return result;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var result = ''\n      if (node.doc) {\n        result += __generateNode(node.doc);\n      }\n\n      result += node.type + ' ' + node.id.name + ' ( ';\n\n      var fnParams = [];\n      for (var i=0, l=node.params.length; i<l; i++) {\n        var prm = __generateNode(node.params[i]);\n        fnParams.push(prm);\n      }\n\n      result += fnParams.join(', ');\n\n      result += ' ) '\n\n      // parse function body\n      result += __generateNode(node.body);\n      \n      return result;\n    },\n    PARAM_DECLARATOR: function (node) {\n\n      var result = util.generateVarDecalaration(node);\n      return result;\n    },\n    RETURN_STATEMENT: function (node) {\n      var result = 'return ' + __generateNode(node.argument);\n      return result;\n    },\n    CALL_STATEMENT: function (node) {\n      var fName = node.callee.name;\n      var result = fName;\n      if (DEFAULT_FUNCTIONS.hasOwnProperty(fName)) {\n        result = DEFAULT_FUNCTIONS[fName];\n        useWatcher.add(fName);\n      }\n\n      result += '( ';\n      var args = [];\n      for (var i=0, l=node['arguments'].length; i<l; i++) {\n        var curArg = node['arguments'][i];\n        args.push(__generateNode(curArg));\n      }\n      result += args.join(', ');\n\n      result += ' )';\n\n      return result;\n    },\n\n\n    FOR_STATEMENT: function (node) {\n      var result = 'for (';\n      result += __generateNode(node.init) + ' ; ';\n      result += __generateNode(node.test) + ' ; ';\n      result += __generateNode(node.update) + ' )';\n      result += __generateNode(node.body);\n      return result;\n    },\n\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var result = __generateNode(node.expression);\n      return result;\n    },\n\n    IDENTIFIER: function (node) {\n      return node.name;\n    },\n\n    LITERAL: function(node) {\n      var result = node.value;\n      if (node.type === 'str') {\n        result = '\"' + result + '\"';\n      }\n      return result;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      var result = '';\n      // eval left and right parts first\n      result += __generateNode(node.left);\n      result += ' ' + node.operator + ' ';\n      result += __generateNode(node.right);\n      return result;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      var result = __generateNode(node.left);\n      // eval asignment right hand side\n      result += ' = ' + __generateNode(node.right);\n      return result;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      var result = ' {\\n';\n\n      indentManager.increase();\n\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item) + ';\\n';\n      });\n\n      indentManager.decrease();\n      \n      result += '}\\n';\n\n      return result;\n    },\n\n    PROGRAM: function (node) {\n      var result = '';\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item);\n        if (!result.match(/\\}[\\s]*$/)) {\n          result += ';';\n        }\n        result += '\\n';\n      });\n      \n      return result;\n    },\n\n    IF_STATEMENT: function (node) {\n\n      var result = 'if ( ';\n\n      result += __generateNode(node.test);\n\n      result += ' )';\n      \n      result += __generateNode(node.consequent);\n\n      if (node.alternate) {\n      result += 'else ';\n        result += __generateNode(node.alternate);\n      }\n      return result;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      var result = __generateNode(node.left) + ' ' + node.operator + ' ' + __generateNode(node.right);\n      return result;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      var result = '';\n      if (node.prefix) {\n        result += node.operator + __generateNode(node.argument);\n      }\n      else {\n        result += __generateNode(node.argument) + node.operator;\n      }\n      return result;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      var result = node.operator + '';\n      result += __generateNode(node.argument);\n      return result;\n    }\n\n  };\n\n  // :: SPARK GENERATOR\n  global.SparkGenerator = api;\n  return api;\n\n})();\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./../common/DEFAULT_FUNCTIONS\":1,\"./modules/GeneratorUtil\":3,\"./modules/IndentManager\":4,\"./modules/UseWatcher\":5}],3:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: UTIL\n  'use strict';\n\n  var typeMap = {\n    'byte'  : 'char',\n    'ubyte' : 'unsigned char',\n    'int'   : 'int',\n    'uint'  : 'unsigned int',\n    'long'  : 'long',\n    'ulong' : 'unsigned long',\n    'float' : 'float',\n    'str'   : 'char',\n    'void'  : 'void',\n  };\n\n  var typeDescriptors = {\n    'str' : {\n      isArray: true,\n      isString: true\n    }\n  }\n\n  var api = {\n    generateType: function (type) {\n      return typeMap[type] || type;\n    },\n\n    generateVarDeclaration: function (node) {\n      var type = api.generateType(node.type);\n      var name = node.id.name;\n      if (typeDescriptors.hasOwnProperty(node.type)) {\n        var td = typeDescriptors[node.type];\n        if (td.isArray) {\n          return type + ' ' + name + '[]';\n        }\n      }\n      return type + ' ' + name;\n    } \n  };\n\n  // :: EXPORT\n  return api;\n\n})();\n},{}],4:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: INDENT MANAGER\n  'use strict';\n\n  var indentLevel = 0;\n  var indentChar = '  ';\n  var currentIndent = '';\n\n  var api = {\n    getCurrentIndent: function () {\n      return currentIndent;\n    },\n    increase: function () {\n      indentLevel += 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    },\n    decrease: function () {\n      indentLevel -= 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    }\n  }\n\n  // :: EXPORT\n  return api;\n\n})();\n},{}],5:[function(require,module,exports){\nmodule.exports = (function () {\n  var uses = [];\n\n  var api = {\n    add: function (func) {\n      if (uses.indexOf(func) === -1) {\n        uses.push(func);\n        return func;\n      }\n      return false;\n    },\n\n    isUsed: function (func) {\n      return uses.indexOf(func) > -1;\n    },\n\n    getUses: function () {\n      return uses;\n    },\n\n    reset: function () {\n      uses = [];\n    }\n  }\n  \n  // :: EXPORT\n  return api;\n\n})();\n},{}]},{},[2])\n\n","module.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var useWatcher = require('./modules/UseWatcher');\n  var indentManager = require('./modules/IndentManager');\n  var util = require('./modules/GeneratorUtil');\n\n  // :: CONSTANTS\n  var DEFAULT_FUNCTIONS = require('./../common/DEFAULT_FUNCTIONS');\n\n  // :: OP\n  var __generateNode = function (node, method) {\n    if (node === null) {\n      return '';\n    }\n    var mType = method || node['$$'];\n    var pNode = evaluate[mType](node)\n    if (pNode.error) {\n      throw new CompilerError('SemanticError', pNode.error.message, pNode.error.location);\n    }\n    return pNode;\n  };\n\n  var __preProcess = function (code) {\n    var result = '';\n    // @TODO: Refactor\n    if (useWatcher.isUsed('print') || useWatcher.isUsed('println')) {\n      result = 'Serial.begin( 9600 );\\n\\n';\n    }\n\n    result = result + code;\n\n    return result;\n  };\n\n  var __postProcess = function (code) {\n    var result = code.trim().replace(/(?!^)[ ]+/igm, ' ');\n    return result;\n  };\n\n  // :: VARS\n\n  // :: API\n  var api = {\n    parse: function (tree) {\n      var code;\n      \n      code = __generateNode(tree);\n      code = __preProcess(code);\n      code = __postProcess(code);\n\n      console.log('USED FUNCSTIONS:');\n      console.log(useWatcher.getUses());\n\n      return code;\n    }\n  };\n\n  // :: GENERATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return '// ' + node.body.join('\\n// ') + '\\n';\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var result = util.generateType(node.type) + ' ';\n\n      var decs = [];\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        var curDec = '';\n        \n        var varPostfix = '';\n        if (item.type === 'str') {\n          varPostfix = '[]';\n        }\n        curDec += __generateNode(item.id) + varPostfix;\n\n        if (item.init) {\n\n          curDec += ' = ' + __generateNode(item.init);\n        }\n\n        decs.push( curDec );\n      }\n\n      result += decs.join(', ');\n\n      return result;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var result = ''\n      if (node.doc) {\n        result += __generateNode(node.doc);\n      }\n\n      result += node.type + ' ' + node.id.name + ' ( ';\n\n      var fnParams = [];\n      for (var i=0, l=node.params.length; i<l; i++) {\n        var prm = __generateNode(node.params[i]);\n        fnParams.push(prm);\n      }\n\n      result += fnParams.join(', ');\n\n      result += ' ) '\n\n      // parse function body\n      result += __generateNode(node.body);\n      \n      return result;\n    },\n    PARAM_DECLARATOR: function (node) {\n\n      var result = util.generateVarDecalaration(node);\n      return result;\n    },\n    RETURN_STATEMENT: function (node) {\n      var result = 'return ' + __generateNode(node.argument);\n      return result;\n    },\n    CALL_STATEMENT: function (node) {\n      var fName = node.callee.name;\n      var result = fName;\n      if (DEFAULT_FUNCTIONS.hasOwnProperty(fName)) {\n        result = DEFAULT_FUNCTIONS[fName];\n        useWatcher.add(fName);\n      }\n\n      result += '( ';\n      var args = [];\n      for (var i=0, l=node['arguments'].length; i<l; i++) {\n        var curArg = node['arguments'][i];\n        args.push(__generateNode(curArg));\n      }\n      result += args.join(', ');\n\n      result += ' )';\n\n      return result;\n    },\n\n\n    FOR_STATEMENT: function (node) {\n      var result = 'for (';\n      result += __generateNode(node.init) + ' ; ';\n      result += __generateNode(node.test) + ' ; ';\n      result += __generateNode(node.update) + ' )';\n      result += __generateNode(node.body);\n      return result;\n    },\n\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var result = __generateNode(node.expression);\n      return result;\n    },\n\n    IDENTIFIER: function (node) {\n      return node.name;\n    },\n\n    LITERAL: function(node) {\n      var result = node.value;\n      if (node.type === 'str') {\n        result = '\"' + result + '\"';\n      }\n      return result;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      var result = '';\n      // eval left and right parts first\n      result += __generateNode(node.left);\n      result += ' ' + node.operator + ' ';\n      result += __generateNode(node.right);\n      return result;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      var result = __generateNode(node.left);\n      // eval asignment right hand side\n      result += ' = ' + __generateNode(node.right);\n      return result;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      var result = ' {\\n';\n\n      indentManager.increase();\n\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item) + ';\\n';\n      });\n\n      indentManager.decrease();\n      \n      result += '}\\n';\n\n      return result;\n    },\n\n    PROGRAM: function (node) {\n      var result = '';\n      node.body.forEach(function(item) {\n        result += indentManager.getCurrentIndent() + __generateNode(item);\n        if (!result.match(/\\}[\\s]*$/)) {\n          result += ';';\n        }\n        result += '\\n';\n      });\n      \n      return result;\n    },\n\n    IF_STATEMENT: function (node) {\n\n      var result = 'if ( ';\n\n      result += __generateNode(node.test);\n\n      result += ' )';\n      \n      result += __generateNode(node.consequent);\n\n      if (node.alternate) {\n      result += 'else ';\n        result += __generateNode(node.alternate);\n      }\n      return result;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      var result = __generateNode(node.left) + ' ' + node.operator + ' ' + __generateNode(node.right);\n      return result;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      var result = '';\n      if (node.prefix) {\n        result += node.operator + __generateNode(node.argument);\n      }\n      else {\n        result += __generateNode(node.argument) + node.operator;\n      }\n      return result;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      var result = node.operator + '';\n      result += __generateNode(node.argument);\n      return result;\n    }\n\n  };\n\n  // :: SPARK GENERATOR\n  global.SparkGenerator = api;\n  return api;\n\n})();","module.exports = (function () {\n  // :: UTIL\n  'use strict';\n\n  var typeMap = {\n    'byte'  : 'char',\n    'ubyte' : 'unsigned char',\n    'int'   : 'int',\n    'uint'  : 'unsigned int',\n    'long'  : 'long',\n    'ulong' : 'unsigned long',\n    'float' : 'float',\n    'str'   : 'char',\n    'void'  : 'void',\n  };\n\n  var typeDescriptors = {\n    'str' : {\n      isArray: true,\n      isString: true\n    }\n  }\n\n  var api = {\n    generateType: function (type) {\n      return typeMap[type] || type;\n    },\n\n    generateVarDeclaration: function (node) {\n      var type = api.generateType(node.type);\n      var name = node.id.name;\n      if (typeDescriptors.hasOwnProperty(node.type)) {\n        var td = typeDescriptors[node.type];\n        if (td.isArray) {\n          return type + ' ' + name + '[]';\n        }\n      }\n      return type + ' ' + name;\n    } \n  };\n\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: INDENT MANAGER\n  'use strict';\n\n  var indentLevel = 0;\n  var indentChar = '  ';\n  var currentIndent = '';\n\n  var api = {\n    getCurrentIndent: function () {\n      return currentIndent;\n    },\n    increase: function () {\n      indentLevel += 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    },\n    decrease: function () {\n      indentLevel -= 1;\n      currentIndent = Array(indentLevel + 1).join(indentChar);\n    }\n  }\n\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  var uses = [];\n\n  var api = {\n    add: function (func) {\n      if (uses.indexOf(func) === -1) {\n        uses.push(func);\n        return func;\n      }\n      return false;\n    },\n\n    isUsed: function (func) {\n      return uses.indexOf(func) > -1;\n    },\n\n    getUses: function () {\n      return uses;\n    },\n\n    reset: function () {\n      uses = [];\n    }\n  }\n  \n  // :: EXPORT\n  return api;\n\n})();"],"sourceRoot":"/source/"}