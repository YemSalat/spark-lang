{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/common/constants.js","evaluator.js","src/evaluator/evaluator.js","src/evaluator/modules/ErrorManager.js","src/evaluator/modules/EvaluatorUtil.js","src/evaluator/modules/FuncTable.js","src/evaluator/modules/SymbolTable.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","api","DEFAULT_CONSTANTS","LOW","name","type","value","HIGH","READ","WRITE",2,"global","SemanticError","message","location","this","symbolTable","funcTable","errorManager","util","__evalNode","node","method","mType","pNode","evaluate","error","console","log","JSON","stringify","parse","tree","options","reset","_tree","symbolScope","getTable","funcScope","DOCSTRING","VARIABLE_STATEMENT","varType","declarations","item","initType","init","cType","typeCheck","logError","id","varName","variable","checkScope","initLine","cVal","addSymbol","VARIABLE_DECLARATOR","FUNCTION_DECLARATION","cFunc","findFunc","cParamDupes","checkParamDuplicates","params","addFunc","enterScope","defaultParamReached","enterFunc","body","curFunc","getCurrentFunc","returnAmount","returns","exitFunc","exitScope","PARAM_DECLARATOR","RETURN_STATEMENT","argument","funcAddReturn","CALL_STATEMENT","callee","FOR_STATEMENT","test","update","BREAK_STATEMENT","CONTINUE_STATEMENT","EXPRESSION_STATEMENT","newNode","expression","IDENTIFIER","findSymbol","LITERAL","getIntegerType","BINARY_EXPRESSION","left","right","operator","ASSIGNMENT_STATEMENT","constructVarDeclarator","ASSIGNMENT_ACTION","BLOCK_STATEMENT","forEach","PROGRAM","IF_STATEMENT","consequent","alternate","LOGICAL_EXPRESSION","isEqualityOperator","isNumber","UPDATE_EXPRESSION","UNARY_EXPRESSION","SparkEvaluator","self","window","./../common/constants","./modules/ErrorManager","./modules/EvaluatorUtil","./modules/FuncTable","./modules/SymbolTable",3,"errorConvertMaps","+","-","*","/","typeArticle","int","byte","long","float","bool","str","errorMap","type_mismatch","already_exists","does_not_exist","already_initialized","already_declared","must_return","incorrect_params","duplicate_param","return_outside","cant_compare","not_a_number","not_a_bool","errorType","errorCategory","errorMessage","paramRegexA","RegExp","paramRegexB","replace","b","cMap","err",4,"numberTypeScale","equalityOperatorMap","signedIntegerLimits","$$","leftType","rightType","strict","iLeft","indexOf","iRight","getParameters","paramArray","curPram","j","prvParam","number","nmb","parseInt","a_nmb","Math","abs","resType","last","nType","hasOwnProperty","limit",5,"table","currentFunc","push","getSignature","cId","arguments","result","reachedDefaultParam","cParam","getParams","pr","default","signature","tableFunc","start","line","doc","func",6,"initialScope","scopePointer","sc0","sc1","currentScope","setInitialScope","scope","getScope","num","scNum","tempScope","symbol","it","../../common/constants"],"mappings":"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","file":"evaluator.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var api = {\n    DEFAULT_CONSTANTS: {\n      LOW: {\n        name: 'LOW',\n        type: 'int',\n        value: 0\n      },\n      HIGH: {\n        name: 'HIGH',\n        type: 'int',\n        value: 1\n      },\n      READ: {\n        name: 'READ',\n        type: 'int',\n        value: 0\n      },\n      WRITE: {\n        name: 'WRITE',\n        type: 'int',\n        value: 1\n      }\n    }\n  };\n\n  return api;\n\n})();","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var api = {\n    DEFAULT_CONSTANTS: {\n      LOW: {\n        name: 'LOW',\n        type: 'int',\n        value: 0\n      },\n      HIGH: {\n        name: 'HIGH',\n        type: 'int',\n        value: 1\n      },\n      READ: {\n        name: 'READ',\n        type: 'int',\n        value: 0\n      },\n      WRITE: {\n        name: 'WRITE',\n        type: 'int',\n        value: 1\n      }\n    }\n  };\n\n  return api;\n\n})();\n},{}],2:[function(require,module,exports){\n(function (global){\nmodule.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var symbolTable = require('./modules/SymbolTable')\n  var funcTable = require('./modules/FuncTable');\n  var errorManager = require('./modules/ErrorManager');\n  var util = require('./modules/EvaluatorUtil');\n  \n  // :: CONSTANTS\n  var DEFAULT_CONSTANTS = require('./../common/constants').DEFAULT_CONSTANTS;\n\n  // :: ERRORS\n  function SemanticError (name, message, location) {\n    this.name = name;\n    this.message = message;\n    this.location = location;\n  }\n\n  // :: OP\n  var __evalNode = function(node, method) {\n    var mType = method ||\n                (node !== null) ? node['$$'] : null;\n\n    var pNode = null;\n    if (mType) {\n      pNode = evaluate[mType](node)\n      if (pNode.error) {\n        console.log(JSON.stringify( pNode ));\n        throw new SemanticError('SemanticError', pNode.error.message, pNode.error.location);\n      }\n    }\n    else {\n      console.log('Node evaluation method is not defined for:');\n      console.log(node);\n    }\n\n    return pNode;\n  };\n\n  var api = {\n    parse: function (tree, options) {\n      // reset tables\n      symbolTable.reset(); \n      funcTable.reset();\n\n      var _tree = __evalNode(tree);\n      \n      return {\n        tree: _tree,\n        symbolScope: symbolTable.getTable(),\n        funcScope: funcTable.getTable()\n      };\n    }\n  };\n\n  // :: EVALUATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return node;\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var varType = node.type;\n\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        \n        // eval right side\n        var initType = null;\n        if (item.init !== null) {\n          item.init = __evalNode(item.init);\n          // check types\n          var cType = util.typeCheck(node.type, item.init.type);\n          if (!cType) {\n            return errorManager.logError(node, node.location, 'type_mismatch', [item.id.name, varType]);\n          }\n          else {\n            node.type = cType;\n          }\n          initType = cType;\n        }\n        // set identifier type\n        item.type = initType;\n        // check if variable exists\n        var varName = item.id.name;\n        var variable = symbolTable.checkScope(varName);\n        if (variable) {\n          // error\n          return errorManager.logError(node, node.location, 'already_exists', [item.id.name, variable.value, variable.initLine]);\n        }\n        else {\n          // add new variable to current scope\n          var cVal = '{null}';\n          if (item.init) {\n            cVal = '{expression}';\n            if (item.init['$$'] === 'LITERAL') {\n              cVal = item.init.value;\n            }\n          }\n          symbolTable.addSymbol(item, { value: cVal, type: node.type });\n        }\n      }\n\n      return node;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var cFunc = funcTable.findFunc(node);\n      if (cFunc) {\n        // error\n        return errorManager.logError(node, node.location, 'already_exists', [node.id.name, cFunc.initLine]);\n      }\n\n      // check duplicate params\n      var cParamDupes = util.checkParamDuplicates(node.params);\n      if (cParamDupes) {\n        return errorManager.logError(cParamDupes, cParamDupes.location, 'duplicate_param', [cParamDupes.id.name]);\n      }\n\n      funcTable.addFunc(node);\n\n      // increase current scope\n      symbolTable.enterScope();\n\n      // eval params\n      if (node.params) {\n        var defaultParamReached = false;\n        for (var i=0,l=node.params.length; i<l; i++) {\n          var item = __evalNode(node.params[i]);\n          // make sure that params with defaults are at the end\n          if (item.default) {\n            defaultParamReached = true;\n          }\n          else if (defaultParamReached) {\n            // incorrect syntax for default params\n            return errorManager.logError(node, item.location, 'incorrect_params', [node.id.name, node.type]);\n          }\n          symbolTable.addSymbol(item, { value: null, type: item.type });\n        }\n      }\n\n      // enter function (used for return check)\n      funcTable.enterFunc(node);\n      // parse function body\n      node.body = __evalNode(node.body);\n      // evaluate return statemnts\n      var curFunc = funcTable.getCurrentFunc();\n      var returnAmount = curFunc.returns.length;\n      if (node.type !== 'void' && returnAmount === 0) {\n        return errorManager.logError(node, node.location, 'must_return', [node.id.name, node.type]);\n      }\n      // exit function\n      funcTable.exitFunc();\n      // exit scope\n      symbolTable.exitScope();\n\n      return node;\n    },\n    PARAM_DECLARATOR: function (node) {\n      // check default value\n      if (node.default) {\n        node.default = __evalNode(node.default);\n        var cType = util.typeCheck(node.type, node.default.type, false);\n        if (!cType) {\n          return errorManager.logError(node, node.location, 'type_mismatch', [node.id.name, node.type]);\n        }\n      }\n      return node;\n    },\n    RETURN_STATEMENT: function (node) {\n      node.argument = __evalNode(node.argument);\n      // set return statement type\n      node.type = (node.argument) ? node.argument.type : 'void';\n\n      // check type matches current function\n      var curFunc = funcTable.getCurrentFunc();\n      if (!curFunc.node) {\n        return errorManager.logError(node, node.location, 'return_outside');\n      }\n      var cType = util.typeCheck(node.type, curFunc.node.type);\n      if (!cType) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [curFunc.node.id.name, curFunc.node.type]);\n      }\n\n      // add return\n      funcTable.funcAddReturn(node);\n\n      return node;\n    },\n    CALL_STATEMENT: function (node) {\n      // check if function exists\n      var cFunc = funcTable.findFunc(node);\n      if (!cFunc) {\n        return errorManager.logError(node, node.location, 'does_not_exist', [node.callee.name]);\n      }\n      // assign call statement type\n      node.type = cFunc.type;\n      return node;\n    },\n\n    FOR_STATEMENT: function (node) {\n      node.init = __evalNode(node.init);\n      node.test = __evalNode(node.test);\n      node.update = __evalNode(node.update);\n      node.body = __evalNode(node.body);\n\n      return node;\n    },\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var newNode = __evalNode(node.expression);\n      return newNode;\n    },\n\n    IDENTIFIER: function (node) {\n      // check if variable exists\n      var varName = node.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (variable) {\n        // assign node type\n        node.type = variable.type;\n      } else {\n        // error\n        return errorManager.logError(node, node.location, 'does_not_exist', [varName]);\n      }\n\n      return node;\n    },\n\n    LITERAL: function(node) {\n      // convert int type\n      if (node.type === 'int') {\n        node.type = util.getIntegerType(node.value);\n      }\n\n      return node;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      // eval left and right parts first\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n      // assign node type\n      // check types\n      node.type = util.typeCheck(node.left.type, node.right.type);\n      // error\n      if (!node.type) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.operator, node.left.type, node.right.type]);\n      }\n      return node;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      // eval asignment right hand side\n      node.right = __evalNode(node.right);\n      // check if variable exists\n      var varName = node.left.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (!variable) {\n        // eval as variable statement instead\n        return __evalNode(util.constructVarDeclarator(node));\n      }\n      // eval left hand side\n      node.left = __evalNode(node.left);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.right.type, node.left.type]);\n      }\n\n      return node;\n    },\n\n    ASSIGNMENT_ACTION: function (node) {\n      return node;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      // increase current scope\n      symbolTable.enterScope();\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n\n      // decrease scope\n      symbolTable.exitScope();\n      \n      return node;\n    },\n\n    PROGRAM: function (node) {\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n      \n      return node;\n    },\n\n    IF_STATEMENT: function (node) {\n      // parse test condition\n      node.test = __evalNode(node.test);\n      // check test type\n      if (node.test.type !== 'bool') {\n        return errorManager.logError(node, node.test.location, 'not_a_bool');\n      }\n\n      // parse consequent and alternate\n      node.consequent = __evalNode(node.consequent);\n      if (node.alternate) {\n        node.alternate = __evalNode(node.alternate);\n      }\n      return node;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        // error\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.left.type, node.right.type]);\n      }\n      else if (!util.isEqualityOperator(node.operator) && !util.isNumber(cType)) {\n        // cant compare\n        return errorManager.logError(node, node.location, 'not_a_number', [node.operator]);\n      }\n      return node;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      if (!util.isNumber(node.argument.type)) {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_number');\n      }\n      node.type = node.argument.type; \n      return node;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      // check 'not' operator is a boolean\n      if (node.operator === '!' && node.argument.type !== 'bool') {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_bool');\n      }\n      node.type = node.argument.type;\n      return node;\n    }\n\n  };\n\n  // :: SPARK EVALUATOR\n  global.SparkEvaluator = api;\n  return api;\n\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./../common/constants\":1,\"./modules/ErrorManager\":3,\"./modules/EvaluatorUtil\":4,\"./modules/FuncTable\":5,\"./modules/SymbolTable\":6}],3:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: ERROR MANAGER\n  'use strict';\n\n  var errorConvertMaps = {\n    operator: {\n      '+' : 'add',\n      '-' : 'subtract',\n      '*' : 'multiply',\n      '/' : 'divide'\n    },\n    typeArticle: {\n      'int'   : 'an',\n      'byte'  : 'a',\n      'long'  : 'a',\n      'float' : 'a',\n      'bool'  : 'a',\n      'str'   : 'a'\n    }\n  };\n\n  var errorMap = {\n    VARIABLE_STATEMENT    : {\n      type_mismatch       :   'variable \"{0}\" does not match type \"{1}\"',\n      already_exists      :   'variable \"{0}\" was already initialized as \\'{1}\\' on line {2}',\n      does_not_exist      :   'variable \"{0}\" is not defined'\n                            },\n    VARIABLE_DECLARATOR   : {\n      already_initialized :   'variable \"{0}\" was already initialized as {1} on line {2}',\n      already_declared    :   'variable \"{0}\" was already declared on line {1}'\n                            },\n    FUNCTION_DECLARATION  : {\n      already_exists      :   'function \"{0}\" was already declared on line {1}',\n      must_return         :   'function \"{0}\" must return {typeArticle: 1} \"{1}\"',\n      incorrect_params    :   'parameters with default values must be declared last'\n                            },\n    CALL_STATEMENT        : {\n      does_not_exist      :   'function \"{0}\" does not exist'\n                            },\n    PARAM_DECLARATOR      : {\n      duplicate_param     :   'duplicate parameter \"{0}\"',\n      type_mismatch       :   'default value for parameter \"{0}\" must be {typeArticle: 1} \"{1}\"'\n                            },\n    RETURN_STATEMENT      : {\n      return_outside      :   'return statement outside function declaration',\n      type_mismatch       :   'return statement type does not match function \"{0}\" of type \"{1}\"'\n                            },\n    IDENTIFIER            : {\n      does_not_exist      :   'variable \"{0}\" does not exist'\n                            },\n    BINARY_EXPRESSION     : {\n      type_mismatch       :   '\"{0}\" operation types do not match, can\\'t {operator: 0} \"{1}\" and \"{2}\"'\n                            },\n    LOGICAL_EXPRESSION    : {\n      type_mismatch       :   'can\\'t compare \"{0}\" and \"{1}\"',\n      cant_compare        :   'can\\'t compare \"{0}\" and \"{1}\"',\n      not_a_number        :   'can use \"{0}\" operator only on numbers'\n                            },\n    ASSIGNMENT_STATEMENT  : {\n      type_mismatch       :   'assignment types mismatch, can\\'t assign \"{0}\" to \"{1}\"'\n                            },\n    UPDATE_EXPRESSION     : {\n      not_a_number        :   'expression is not a number'\n                            },\n    UNARY_EXPRESSION      : {\n      not_a_bool          :   'unary expression must be a boolean'\n                            },\n    IF_STATEMENT          : {\n      not_a_bool          :   'IF condition must be a boolean'\n                            }\n  };\n\n  // log error\n  var logError = function(node, location, errorType, params) {\n    var errorCategory = (typeof node === 'string') ? node : node['$$'];\n    var errorMessage = errorMap[errorCategory][errorType];\n    // 'parse' error message\n    if (params) {\n      for (var i=0,l=params.length; i<l; i++) {\n        var parameter = params[i];\n        var paramRegexA = new RegExp('\\\\{[ ]*([a-z]+)[ ]*\\\\:[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        var paramRegexB = new RegExp('\\\\{[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        errorMessage = errorMessage.replace(paramRegexA, function (a, b) {\n          var cMap = errorConvertMaps[b];\n          return cMap[params[i]];\n        });\n        errorMessage = errorMessage.replace(paramRegexB, params[i]);\n      }\n    }\n\n    var err = {\n      error: {\n        location: location,\n        message: errorMessage,\n        node: node\n      }\n    }\n\n    return err;\n  }\n\n  // api\n  var api = {\n    logError: logError\n  }\n\n\n  // :: EXPORT\n  return api;\n\n})();\n},{}],4:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: UTILS\n  'use strict';\n  var numberTypeScale = ['byte', 'int', 'long', 'float'];\n  var equalityOperatorMap = ['==', '!=', 'is', 'is not'];\n  var signedIntegerLimits = {\n    'byte': 128,\n    'int': 32767,\n    'long': 2147483647\n  };\n  \n  var api = {\n    constructVarDeclarator: function (node) {\n      node['$$'] = 'VARIABLE_STATEMENT';\n      node.type = node.right.type;\n      node.declarations = [\n        {\n          '$$': 'VARIABLE_DECLARATOR',\n          'id': {\n            'location': node.left.location,\n            '$$': 'IDENTIFIER',\n            'name': node.left.name\n          },\n          'location': node.left.location,\n          'init': node.right\n        }\n      ];\n\n      return node;\n    },\n    typeCheck: function (leftType, rightType, strict) {\n      if (strict) {\n        return leftType === rightType;\n      }\n      if (!leftType || !rightType) {\n        return false;\n      }\n      // types match - return\n      if (leftType === rightType) {\n        return leftType;\n      }\n\n      // check numbers\n      var iLeft = numberTypeScale.indexOf(leftType);\n      if (iLeft > -1) {\n        var iRight = numberTypeScale.indexOf(rightType);\n        if (iRight > -1) {\n          // promote left type\n          if (iLeft < iRight) {\n            leftType = rightType;\n          }\n          return leftType;\n        }\n        // left is number, right is not\n        return false;\n      }\n\n      return false;\n    },\n    getParameters: function (paramArray) {\n\n    },\n    checkParamDuplicates: function (params) {\n      for (var i=1,l=params.length; i<l; i++) {\n        var curPram = params[i];\n        for (var j=0; j<i; j++) {\n          var prvParam = params[j];\n          if (prvParam.id.name === curPram.id.name) {\n            return curPram;\n          }\n        }\n      }\n      return false;\n    },\n    isNumber: function (type) {\n      return numberTypeScale.indexOf(type) > -1;\n    },\n    isEqualityOperator: function (operator) {\n      return equalityOperatorMap.indexOf(operator) > -1;\n    },\n    getIntegerType: function (number) {\n      var nmb = parseInt(number, 10);\n      var a_nmb = Math.abs(nmb);\n\n      var resType = 'int';\n      var last = signedIntegerLimits['long'];\n\n      for (var nType in signedIntegerLimits) {\n        if (signedIntegerLimits.hasOwnProperty(nType)) {\n          var limit = signedIntegerLimits[nType];\n          if (a_nmb <= limit && last >= limit) {\n            resType = nType;\n            last = limit;\n          }\n        }\n      }\n\n      return resType;\n    }\n  };\n  // :: EXPORT\n  return api;\n\n})();\n},{}],5:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: FUNCTION TABLE\n  'use strict';\n\n  var table = {};\n  var currentFunc = {\n    node: null,\n    returns: []\n  };\n  \n  var api = {\n    getTable: function () {\n      return table;\n    },\n\n    reset: function () {\n      table = {};\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    getCurrentFunc: function () {\n      return currentFunc;\n    },\n\n    enterFunc: function (node) {\n      currentFunc.node = node;\n    },\n\n    exitFunc: function () {\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    funcAddReturn: function (node) {\n      currentFunc.returns.push(node);\n    },\n\n    getSignature: function (node) {\n      var cId = node.id || node.callee;\n      var params = node.params;\n      if (node['$$'] === 'CALL_STATEMENT') {\n        params = node.arguments;\n      } \n      var result = cId.name + '__';\n      var reachedDefaultParam = false;\n      for (var i=0, l=params.length; i<l; i++) {\n        var cParam = params[i];\n        if ( !reachedDefaultParam && cParam.default) {\n          result += '['; // separate default params with pipes\n          reachedDefaultParam = true;\n        }\n        result += cParam.type + '_';\n      }\n      if (reachedDefaultParam) {\n        result += ']';\n      }\n      result += 'fn';\n      return result;\n    },\n\n    getParams: function (params) {\n      var result = [];\n      for (var i=0,l=params.length;i<l;i++) {\n        var pr = params[i];\n        result.push({\n          type: pr.type,\n          name: pr.id.name,\n          default: pr.default\n        });\n      }\n      return result;\n    },\n\n    findFunc: function (node) {\n      var cId = node.id || node.callee;\n      var name = cId.name;\n      var signature = api.getSignature(node);\n      if (table.hasOwnProperty(name)) {\n        var tableFunc = table[name];\n        for (var i=0, l=tableFunc.length; i<l; i++) {\n          var cFunc = tableFunc[i];\n          if (cFunc.signature === signature) {\n            return cFunc; \n          }\n          else if (cFunc.signature.replace(/\\[[a-z_]+\\]/, '') === signature) {\n            return cFunc;\n          }\n        }\n      }\n      return null;\n    },\n\n    addFunc: function (node) {\n      var signature = api.getSignature(node);\n      var name = node.id.name;\n      var type = node.type;\n      var params = api.getParams(node.params);\n      var initLine = node.location.start.line;\n      var doc = (node.doc) ? node.doc.body : \"\";\n\n      if (! table[name] ) {\n        table[name] = [];\n      }\n\n      var func = {\n        signature: signature,\n        type: type,\n        params: params,\n        initLine: initLine,\n        doc: doc,\n        node: node\n      };\n\n      table[name].push(func);\n\n      return func;\n    }\n  }\n  // :: EXPORT\n  return api;\n\n})();\n\n},{}],6:[function(require,module,exports){\nmodule.exports = (function () {\n  // :: SYMBOL TABLE\n  'use strict';\n\n  var initialScope = require('../../common/constants').DEFAULT_CONSTANTS;\n\n  var scopePointer = 1;\n  var table = {\n    sc0: initialScope,\n    sc1: {}\n  };\n  var currentScope = table['sc' + scopePointer];\n\n  var api = {\n\n    setInitialScope: function (scope) {\n      initialScope = scope;\n      api.reset();\n    },\n\n    getTable: function() {\n      return table;\n    },\n\n    reset: function () {\n      scopePointer = 1;\n      table = {\n        sc0: initialScope,\n        sc1: {}\n      };\n      currentScope = table['sc' + scopePointer];\n    },\n\n    enterScope: function () {\n      scopePointer += 1;\n      table['sc' + scopePointer] = {};\n      currentScope = table['sc' + scopePointer];\n    },\n\n    exitScope: function () {\n      if (scopePointer > 1) {\n        table['sc' + scopePointer] = null;\n      }\n      scopePointer -= 1;\n      currentScope = table['sc' + scopePointer];\n    },\n\n    getScope: function (num) {\n      var scNum = (typeof num !== 'udefined') ? num : scopePointer;\n      return table['sc' + scNum];\n    },\n\n    findSymbol: function (name) {\n      for (var i = scopePointer; i >= 0; i--) {\n        var tempScope = api.getScope(i);\n        if (tempScope.hasOwnProperty(name)) {\n          return tempScope[name];\n        }\n      }\n      return null;\n    },\n\n    addSymbol: function (symbol, it) {\n      var init = it || symbol.init;\n      var name = symbol.id.name;\n      var value = init.value;\n      var type = init.type;\n      var initLine = symbol.location.start.line;\n\n      currentScope[name] = {\n        name: name,\n        value: value,\n        type: type,\n        initLine: initLine\n      };\n    },\n\n    checkScope: function (name) {\n      if (currentScope.hasOwnProperty(name)) {\n        return currentScope[name];\n      } else {\n        return false;\n      }\n    }  \n  }\n\n  // :: EXPORT\n  return api;\n  \n})();\n},{\"../../common/constants\":1}]},{},[2])\n\n","module.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var symbolTable = require('./modules/SymbolTable')\n  var funcTable = require('./modules/FuncTable');\n  var errorManager = require('./modules/ErrorManager');\n  var util = require('./modules/EvaluatorUtil');\n  \n  // :: CONSTANTS\n  var DEFAULT_CONSTANTS = require('./../common/constants').DEFAULT_CONSTANTS;\n\n  // :: ERRORS\n  function SemanticError (name, message, location) {\n    this.name = name;\n    this.message = message;\n    this.location = location;\n  }\n\n  // :: OP\n  var __evalNode = function(node, method) {\n    var mType = method ||\n                (node !== null) ? node['$$'] : null;\n\n    var pNode = null;\n    if (mType) {\n      pNode = evaluate[mType](node)\n      if (pNode.error) {\n        console.log(JSON.stringify( pNode ));\n        throw new SemanticError('SemanticError', pNode.error.message, pNode.error.location);\n      }\n    }\n    else {\n      console.log('Node evaluation method is not defined for:');\n      console.log(node);\n    }\n\n    return pNode;\n  };\n\n  var api = {\n    parse: function (tree, options) {\n      // reset tables\n      symbolTable.reset(); \n      funcTable.reset();\n\n      var _tree = __evalNode(tree);\n      \n      return {\n        tree: _tree,\n        symbolScope: symbolTable.getTable(),\n        funcScope: funcTable.getTable()\n      };\n    }\n  };\n\n  // :: EVALUATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return node;\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var varType = node.type;\n\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        \n        // eval right side\n        var initType = null;\n        if (item.init !== null) {\n          item.init = __evalNode(item.init);\n          // check types\n          var cType = util.typeCheck(node.type, item.init.type);\n          if (!cType) {\n            return errorManager.logError(node, node.location, 'type_mismatch', [item.id.name, varType]);\n          }\n          else {\n            node.type = cType;\n          }\n          initType = cType;\n        }\n        // set identifier type\n        item.type = initType;\n        // check if variable exists\n        var varName = item.id.name;\n        var variable = symbolTable.checkScope(varName);\n        if (variable) {\n          // error\n          return errorManager.logError(node, node.location, 'already_exists', [item.id.name, variable.value, variable.initLine]);\n        }\n        else {\n          // add new variable to current scope\n          var cVal = '{null}';\n          if (item.init) {\n            cVal = '{expression}';\n            if (item.init['$$'] === 'LITERAL') {\n              cVal = item.init.value;\n            }\n          }\n          symbolTable.addSymbol(item, { value: cVal, type: node.type });\n        }\n      }\n\n      return node;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var cFunc = funcTable.findFunc(node);\n      if (cFunc) {\n        // error\n        return errorManager.logError(node, node.location, 'already_exists', [node.id.name, cFunc.initLine]);\n      }\n\n      // check duplicate params\n      var cParamDupes = util.checkParamDuplicates(node.params);\n      if (cParamDupes) {\n        return errorManager.logError(cParamDupes, cParamDupes.location, 'duplicate_param', [cParamDupes.id.name]);\n      }\n\n      funcTable.addFunc(node);\n\n      // increase current scope\n      symbolTable.enterScope();\n\n      // eval params\n      if (node.params) {\n        var defaultParamReached = false;\n        for (var i=0,l=node.params.length; i<l; i++) {\n          var item = __evalNode(node.params[i]);\n          // make sure that params with defaults are at the end\n          if (item.default) {\n            defaultParamReached = true;\n          }\n          else if (defaultParamReached) {\n            // incorrect syntax for default params\n            return errorManager.logError(node, item.location, 'incorrect_params', [node.id.name, node.type]);\n          }\n          symbolTable.addSymbol(item, { value: null, type: item.type });\n        }\n      }\n\n      // enter function (used for return check)\n      funcTable.enterFunc(node);\n      // parse function body\n      node.body = __evalNode(node.body);\n      // evaluate return statemnts\n      var curFunc = funcTable.getCurrentFunc();\n      var returnAmount = curFunc.returns.length;\n      if (node.type !== 'void' && returnAmount === 0) {\n        return errorManager.logError(node, node.location, 'must_return', [node.id.name, node.type]);\n      }\n      // exit function\n      funcTable.exitFunc();\n      // exit scope\n      symbolTable.exitScope();\n\n      return node;\n    },\n    PARAM_DECLARATOR: function (node) {\n      // check default value\n      if (node.default) {\n        node.default = __evalNode(node.default);\n        var cType = util.typeCheck(node.type, node.default.type, false);\n        if (!cType) {\n          return errorManager.logError(node, node.location, 'type_mismatch', [node.id.name, node.type]);\n        }\n      }\n      return node;\n    },\n    RETURN_STATEMENT: function (node) {\n      node.argument = __evalNode(node.argument);\n      // set return statement type\n      node.type = (node.argument) ? node.argument.type : 'void';\n\n      // check type matches current function\n      var curFunc = funcTable.getCurrentFunc();\n      if (!curFunc.node) {\n        return errorManager.logError(node, node.location, 'return_outside');\n      }\n      var cType = util.typeCheck(node.type, curFunc.node.type);\n      if (!cType) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [curFunc.node.id.name, curFunc.node.type]);\n      }\n\n      // add return\n      funcTable.funcAddReturn(node);\n\n      return node;\n    },\n    CALL_STATEMENT: function (node) {\n      // check if function exists\n      var cFunc = funcTable.findFunc(node);\n      if (!cFunc) {\n        return errorManager.logError(node, node.location, 'does_not_exist', [node.callee.name]);\n      }\n      // assign call statement type\n      node.type = cFunc.type;\n      return node;\n    },\n\n    FOR_STATEMENT: function (node) {\n      node.init = __evalNode(node.init);\n      node.test = __evalNode(node.test);\n      node.update = __evalNode(node.update);\n      node.body = __evalNode(node.body);\n\n      return node;\n    },\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var newNode = __evalNode(node.expression);\n      return newNode;\n    },\n\n    IDENTIFIER: function (node) {\n      // check if variable exists\n      var varName = node.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (variable) {\n        // assign node type\n        node.type = variable.type;\n      } else {\n        // error\n        return errorManager.logError(node, node.location, 'does_not_exist', [varName]);\n      }\n\n      return node;\n    },\n\n    LITERAL: function(node) {\n      // convert int type\n      if (node.type === 'int') {\n        node.type = util.getIntegerType(node.value);\n      }\n\n      return node;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      // eval left and right parts first\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n      // assign node type\n      // check types\n      node.type = util.typeCheck(node.left.type, node.right.type);\n      // error\n      if (!node.type) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.operator, node.left.type, node.right.type]);\n      }\n      return node;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      // eval asignment right hand side\n      node.right = __evalNode(node.right);\n      // check if variable exists\n      var varName = node.left.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (!variable) {\n        // eval as variable statement instead\n        return __evalNode(util.constructVarDeclarator(node));\n      }\n      // eval left hand side\n      node.left = __evalNode(node.left);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.right.type, node.left.type]);\n      }\n\n      return node;\n    },\n\n    ASSIGNMENT_ACTION: function (node) {\n      return node;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      // increase current scope\n      symbolTable.enterScope();\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n\n      // decrease scope\n      symbolTable.exitScope();\n      \n      return node;\n    },\n\n    PROGRAM: function (node) {\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n      \n      return node;\n    },\n\n    IF_STATEMENT: function (node) {\n      // parse test condition\n      node.test = __evalNode(node.test);\n      // check test type\n      if (node.test.type !== 'bool') {\n        return errorManager.logError(node, node.test.location, 'not_a_bool');\n      }\n\n      // parse consequent and alternate\n      node.consequent = __evalNode(node.consequent);\n      if (node.alternate) {\n        node.alternate = __evalNode(node.alternate);\n      }\n      return node;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        // error\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.left.type, node.right.type]);\n      }\n      else if (!util.isEqualityOperator(node.operator) && !util.isNumber(cType)) {\n        // cant compare\n        return errorManager.logError(node, node.location, 'not_a_number', [node.operator]);\n      }\n      return node;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      if (!util.isNumber(node.argument.type)) {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_number');\n      }\n      node.type = node.argument.type; \n      return node;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      // check 'not' operator is a boolean\n      if (node.operator === '!' && node.argument.type !== 'bool') {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_bool');\n      }\n      node.type = node.argument.type;\n      return node;\n    }\n\n  };\n\n  // :: SPARK EVALUATOR\n  global.SparkEvaluator = api;\n  return api;\n\n})();\n","module.exports = (function () {\n  // :: ERROR MANAGER\n  'use strict';\n\n  var errorConvertMaps = {\n    operator: {\n      '+' : 'add',\n      '-' : 'subtract',\n      '*' : 'multiply',\n      '/' : 'divide'\n    },\n    typeArticle: {\n      'int'   : 'an',\n      'byte'  : 'a',\n      'long'  : 'a',\n      'float' : 'a',\n      'bool'  : 'a',\n      'str'   : 'a'\n    }\n  };\n\n  var errorMap = {\n    VARIABLE_STATEMENT    : {\n      type_mismatch       :   'variable \"{0}\" does not match type \"{1}\"',\n      already_exists      :   'variable \"{0}\" was already initialized as \\'{1}\\' on line {2}',\n      does_not_exist      :   'variable \"{0}\" is not defined'\n                            },\n    VARIABLE_DECLARATOR   : {\n      already_initialized :   'variable \"{0}\" was already initialized as {1} on line {2}',\n      already_declared    :   'variable \"{0}\" was already declared on line {1}'\n                            },\n    FUNCTION_DECLARATION  : {\n      already_exists      :   'function \"{0}\" was already declared on line {1}',\n      must_return         :   'function \"{0}\" must return {typeArticle: 1} \"{1}\"',\n      incorrect_params    :   'parameters with default values must be declared last'\n                            },\n    CALL_STATEMENT        : {\n      does_not_exist      :   'function \"{0}\" does not exist'\n                            },\n    PARAM_DECLARATOR      : {\n      duplicate_param     :   'duplicate parameter \"{0}\"',\n      type_mismatch       :   'default value for parameter \"{0}\" must be {typeArticle: 1} \"{1}\"'\n                            },\n    RETURN_STATEMENT      : {\n      return_outside      :   'return statement outside function declaration',\n      type_mismatch       :   'return statement type does not match function \"{0}\" of type \"{1}\"'\n                            },\n    IDENTIFIER            : {\n      does_not_exist      :   'variable \"{0}\" does not exist'\n                            },\n    BINARY_EXPRESSION     : {\n      type_mismatch       :   '\"{0}\" operation types do not match, can\\'t {operator: 0} \"{1}\" and \"{2}\"'\n                            },\n    LOGICAL_EXPRESSION    : {\n      type_mismatch       :   'can\\'t compare \"{0}\" and \"{1}\"',\n      cant_compare        :   'can\\'t compare \"{0}\" and \"{1}\"',\n      not_a_number        :   'can use \"{0}\" operator only on numbers'\n                            },\n    ASSIGNMENT_STATEMENT  : {\n      type_mismatch       :   'assignment types mismatch, can\\'t assign \"{0}\" to \"{1}\"'\n                            },\n    UPDATE_EXPRESSION     : {\n      not_a_number        :   'expression is not a number'\n                            },\n    UNARY_EXPRESSION      : {\n      not_a_bool          :   'unary expression must be a boolean'\n                            },\n    IF_STATEMENT          : {\n      not_a_bool          :   'IF condition must be a boolean'\n                            }\n  };\n\n  // log error\n  var logError = function(node, location, errorType, params) {\n    var errorCategory = (typeof node === 'string') ? node : node['$$'];\n    var errorMessage = errorMap[errorCategory][errorType];\n    // 'parse' error message\n    if (params) {\n      for (var i=0,l=params.length; i<l; i++) {\n        var parameter = params[i];\n        var paramRegexA = new RegExp('\\\\{[ ]*([a-z]+)[ ]*\\\\:[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        var paramRegexB = new RegExp('\\\\{[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        errorMessage = errorMessage.replace(paramRegexA, function (a, b) {\n          var cMap = errorConvertMaps[b];\n          return cMap[params[i]];\n        });\n        errorMessage = errorMessage.replace(paramRegexB, params[i]);\n      }\n    }\n\n    var err = {\n      error: {\n        location: location,\n        message: errorMessage,\n        node: node\n      }\n    }\n\n    return err;\n  }\n\n  // api\n  var api = {\n    logError: logError\n  }\n\n\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: UTILS\n  'use strict';\n  var numberTypeScale = ['byte', 'int', 'long', 'float'];\n  var equalityOperatorMap = ['==', '!=', 'is', 'is not'];\n  var signedIntegerLimits = {\n    'byte': 128,\n    'int': 32767,\n    'long': 2147483647\n  };\n  \n  var api = {\n    constructVarDeclarator: function (node) {\n      node['$$'] = 'VARIABLE_STATEMENT';\n      node.type = node.right.type;\n      node.declarations = [\n        {\n          '$$': 'VARIABLE_DECLARATOR',\n          'id': {\n            'location': node.left.location,\n            '$$': 'IDENTIFIER',\n            'name': node.left.name\n          },\n          'location': node.left.location,\n          'init': node.right\n        }\n      ];\n\n      return node;\n    },\n    typeCheck: function (leftType, rightType, strict) {\n      if (strict) {\n        return leftType === rightType;\n      }\n      if (!leftType || !rightType) {\n        return false;\n      }\n      // types match - return\n      if (leftType === rightType) {\n        return leftType;\n      }\n\n      // check numbers\n      var iLeft = numberTypeScale.indexOf(leftType);\n      if (iLeft > -1) {\n        var iRight = numberTypeScale.indexOf(rightType);\n        if (iRight > -1) {\n          // promote left type\n          if (iLeft < iRight) {\n            leftType = rightType;\n          }\n          return leftType;\n        }\n        // left is number, right is not\n        return false;\n      }\n\n      return false;\n    },\n    getParameters: function (paramArray) {\n\n    },\n    checkParamDuplicates: function (params) {\n      for (var i=1,l=params.length; i<l; i++) {\n        var curPram = params[i];\n        for (var j=0; j<i; j++) {\n          var prvParam = params[j];\n          if (prvParam.id.name === curPram.id.name) {\n            return curPram;\n          }\n        }\n      }\n      return false;\n    },\n    isNumber: function (type) {\n      return numberTypeScale.indexOf(type) > -1;\n    },\n    isEqualityOperator: function (operator) {\n      return equalityOperatorMap.indexOf(operator) > -1;\n    },\n    getIntegerType: function (number) {\n      var nmb = parseInt(number, 10);\n      var a_nmb = Math.abs(nmb);\n\n      var resType = 'int';\n      var last = signedIntegerLimits['long'];\n\n      for (var nType in signedIntegerLimits) {\n        if (signedIntegerLimits.hasOwnProperty(nType)) {\n          var limit = signedIntegerLimits[nType];\n          if (a_nmb <= limit && last >= limit) {\n            resType = nType;\n            last = limit;\n          }\n        }\n      }\n\n      return resType;\n    }\n  };\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: FUNCTION TABLE\n  'use strict';\n\n  var table = {};\n  var currentFunc = {\n    node: null,\n    returns: []\n  };\n  \n  var api = {\n    getTable: function () {\n      return table;\n    },\n\n    reset: function () {\n      table = {};\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    getCurrentFunc: function () {\n      return currentFunc;\n    },\n\n    enterFunc: function (node) {\n      currentFunc.node = node;\n    },\n\n    exitFunc: function () {\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    funcAddReturn: function (node) {\n      currentFunc.returns.push(node);\n    },\n\n    getSignature: function (node) {\n      var cId = node.id || node.callee;\n      var params = node.params;\n      if (node['$$'] === 'CALL_STATEMENT') {\n        params = node.arguments;\n      } \n      var result = cId.name + '__';\n      var reachedDefaultParam = false;\n      for (var i=0, l=params.length; i<l; i++) {\n        var cParam = params[i];\n        if ( !reachedDefaultParam && cParam.default) {\n          result += '['; // separate default params with pipes\n          reachedDefaultParam = true;\n        }\n        result += cParam.type + '_';\n      }\n      if (reachedDefaultParam) {\n        result += ']';\n      }\n      result += 'fn';\n      return result;\n    },\n\n    getParams: function (params) {\n      var result = [];\n      for (var i=0,l=params.length;i<l;i++) {\n        var pr = params[i];\n        result.push({\n          type: pr.type,\n          name: pr.id.name,\n          default: pr.default\n        });\n      }\n      return result;\n    },\n\n    findFunc: function (node) {\n      var cId = node.id || node.callee;\n      var name = cId.name;\n      var signature = api.getSignature(node);\n      if (table.hasOwnProperty(name)) {\n        var tableFunc = table[name];\n        for (var i=0, l=tableFunc.length; i<l; i++) {\n          var cFunc = tableFunc[i];\n          if (cFunc.signature === signature) {\n            return cFunc; \n          }\n          else if (cFunc.signature.replace(/\\[[a-z_]+\\]/, '') === signature) {\n            return cFunc;\n          }\n        }\n      }\n      return null;\n    },\n\n    addFunc: function (node) {\n      var signature = api.getSignature(node);\n      var name = node.id.name;\n      var type = node.type;\n      var params = api.getParams(node.params);\n      var initLine = node.location.start.line;\n      var doc = (node.doc) ? node.doc.body : \"\";\n\n      if (! table[name] ) {\n        table[name] = [];\n      }\n\n      var func = {\n        signature: signature,\n        type: type,\n        params: params,\n        initLine: initLine,\n        doc: doc,\n        node: node\n      };\n\n      table[name].push(func);\n\n      return func;\n    }\n  }\n  // :: EXPORT\n  return api;\n\n})();\n","module.exports = (function () {\n  // :: SYMBOL TABLE\n  'use strict';\n\n  var initialScope = require('../../common/constants').DEFAULT_CONSTANTS;\n\n  var scopePointer = 1;\n  var table = {\n    sc0: initialScope,\n    sc1: {}\n  };\n  var currentScope = table['sc' + scopePointer];\n\n  var api = {\n\n    setInitialScope: function (scope) {\n      initialScope = scope;\n      api.reset();\n    },\n\n    getTable: function() {\n      return table;\n    },\n\n    reset: function () {\n      scopePointer = 1;\n      table = {\n        sc0: initialScope,\n        sc1: {}\n      };\n      currentScope = table['sc' + scopePointer];\n    },\n\n    enterScope: function () {\n      scopePointer += 1;\n      table['sc' + scopePointer] = {};\n      currentScope = table['sc' + scopePointer];\n    },\n\n    exitScope: function () {\n      if (scopePointer > 1) {\n        table['sc' + scopePointer] = null;\n      }\n      scopePointer -= 1;\n      currentScope = table['sc' + scopePointer];\n    },\n\n    getScope: function (num) {\n      var scNum = (typeof num !== 'udefined') ? num : scopePointer;\n      return table['sc' + scNum];\n    },\n\n    findSymbol: function (name) {\n      for (var i = scopePointer; i >= 0; i--) {\n        var tempScope = api.getScope(i);\n        if (tempScope.hasOwnProperty(name)) {\n          return tempScope[name];\n        }\n      }\n      return null;\n    },\n\n    addSymbol: function (symbol, it) {\n      var init = it || symbol.init;\n      var name = symbol.id.name;\n      var value = init.value;\n      var type = init.type;\n      var initLine = symbol.location.start.line;\n\n      currentScope[name] = {\n        name: name,\n        value: value,\n        type: type,\n        initLine: initLine\n      };\n    },\n\n    checkScope: function (name) {\n      if (currentScope.hasOwnProperty(name)) {\n        return currentScope[name];\n      } else {\n        return false;\n      }\n    }  \n  }\n\n  // :: EXPORT\n  return api;\n  \n})();"],"sourceRoot":"/source/"}