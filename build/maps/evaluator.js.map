{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/common/constants.js","src/common/functions.js","src/evaluator/evaluator.js","src/evaluator/modules/ErrorManager.js","src/evaluator/modules/EvaluatorUtil.js","src/evaluator/modules/FuncTable.js","src/evaluator/modules/SymbolTable.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjnjnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"evaluator.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var api = {\n    DEFAULT_CONSTANTS: {\n      LOW: {\n        name: 'LOW',\n        type: 'int',\n        value: 0\n      },\n      HIGH: {\n        name: 'HIGH',\n        type: 'int',\n        value: 1\n      },\n      READ: {\n        name: 'READ',\n        type: 'int',\n        value: 0\n      },\n      WRITE: {\n        name: 'WRITE',\n        type: 'int',\n        value: 1\n      }\n    }\n  };\n\n  return api;\n\n})();","module.exports = (function () {\n  // :: CONSTANTS\n  'use strict';\n  \n  var api = {\n      DEFAULT_FUNCTIONS: {\n      millis: 'millis',\n      pinRead: 'digitalRead',\n      pinWrite: 'digitalWrite',\n      pinMode: 'pinMode',\n      print: 'Serial.print',\n      printn: 'Serial.println'\n    }\n  }\n\n  return api;\n\n})();","module.exports = (function() {\n  'use strict';\n\n  // :: MODULES\n  var symbolTable = require('./modules/SymbolTable')\n  var funcTable = require('./modules/FuncTable');\n  var errorManager = require('./modules/ErrorManager');\n  var util = require('./modules/EvaluatorUtil');\n  \n  // :: CONSTANTS\n  var DEFAULT_CONSTANTS = require('./../common/constants').DEFAULT_CONSTANTS;\n  var DEFAULT_FUNCTIONS = require('./../common/functions').DEFAULT_FUNCTIONS;\n\n  // :: ERRORS\n  function SemanticError (name, message, location) {\n    this.name = name;\n    this.message = message;\n    this.location = location;\n  }\n\n  // :: OP\n  var __evalNode = function(node, method) {\n    var mType = method ||\n                (node !== null) ? node['$$'] : null;\n\n    var pNode = null;\n    if (mType) {\n      pNode = evaluate[mType](node)\n      if (pNode.error) {\n        console.log(JSON.stringify( pNode ));\n        throw new SemanticError('SemanticError', pNode.error.message, pNode.error.location);\n      }\n    }\n    else {\n      console.log('Node evaluation method is not defined for:');\n      console.log(node);\n    }\n\n    return pNode;\n  };\n\n  var api = {\n    parse: function (tree, options) {\n      // reset tables\n      symbolTable.reset(); \n      funcTable.reset();\n\n      var _tree = __evalNode(tree);\n      \n      return {\n        tree: _tree,\n        symbolScope: symbolTable.getTable(),\n        funcScope: funcTable.getTable()\n      };\n    }\n  };\n\n  // :: EVALUATE\n  var evaluate = {\n\n    DOCSTRING: function(node) {\n      return node;\n    },\n    \n    VARIABLE_STATEMENT: function(node) {\n      var varType = node.type;\n\n      for (var i=0,l=node.declarations.length; i<l; i++) {\n        var item = node.declarations[i];\n        \n        // eval right side\n        var initType = null;\n        if (item.init !== null) {\n          item.init = __evalNode(item.init);\n          // check types\n          var cType = util.typeCheck(node.type, item.init.type);\n          if (!cType) {\n            return errorManager.logError(node, node.location, 'type_mismatch', [item.id.name, varType]);\n          }\n          else {\n            if (util.isNumber(node.type)) {\n              if (util.compareNumberTypes(varType, item.init.type) < 0)\n                return errorManager.logError(node, node.location, 'number_doesnt_fit', [item.init.type, varType]);\n            }\n            node.type = cType;\n          }\n          initType = cType;\n        }\n        // set identifier type\n        item.type = initType;\n        // check if variable exists\n        var varName = item.id.name;\n        var variable = symbolTable.checkScope(varName);\n        if (variable) {\n          // error\n          return errorManager.logError(node, node.location, 'already_exists', [item.id.name, variable.value, variable.initLine]);\n        }\n        else {\n          // add new variable to current scope\n          var cVal = '{null}';\n          if (item.init) {\n            cVal = '{expression}';\n            if (item.init['$$'] === 'LITERAL') {\n              cVal = item.init.value;\n            }\n          }\n          symbolTable.addSymbol(item, { value: cVal, type: node.type });\n        }\n      }\n\n      return node;\n    },\n\n    VARIABLE_DECLARATOR: function (node) {\n      return node;\n    },\n\n\n    FUNCTION_DECLARATION: function (node) {\n      var cName = node.id.name;\n      // dont eval built-in functions\n      if (DEFAULT_FUNCTIONS.hasOwnProperty(cName)) {\n        return errorManager.logError(node, node.location, 'cant_redeclare', [cName]);\n      }\n\n      var cFunc = funcTable.findFunc(node);\n      if (cFunc) {\n        // error\n        return errorManager.logError(node, node.location, 'already_exists', [cName, cFunc.initLine]);\n      }\n\n      // check duplicate params\n      var cParamDupes = util.checkParamDuplicates(node.params);\n      if (cParamDupes) {\n        return errorManager.logError(cParamDupes, cParamDupes.location, 'duplicate_param', [cParamDupes.id.name]);\n      }\n\n      funcTable.addFunc(node);\n\n      // increase current scope\n      symbolTable.enterScope();\n\n      // eval params\n      if (node.params) {\n        var defaultParamReached = false;\n        for (var i=0,l=node.params.length; i<l; i++) {\n          var item = __evalNode(node.params[i]);\n          // make sure that params with defaults are at the end\n          if (item.default) {\n            defaultParamReached = true;\n          }\n          else if (defaultParamReached) {\n            // incorrect syntax for default params\n            return errorManager.logError(node, item.location, 'incorrect_params', [cName, node.type]);\n          }\n          symbolTable.addSymbol(item, { value: null, type: item.type });\n        }\n      }\n\n      // enter function (used for return check)\n      funcTable.enterFunc(node);\n      // parse function body\n      node.body = __evalNode(node.body);\n      // evaluate return statemnts\n      var curFunc = funcTable.getCurrentFunc();\n      var returnAmount = curFunc.returns.length;\n      if (node.type !== 'void' && returnAmount === 0) {\n        return errorManager.logError(node, node.id.location, 'must_return', [cName, node.type]);\n      }\n      // exit function\n      funcTable.exitFunc();\n      // exit scope\n      symbolTable.exitScope();\n\n      return node;\n    },\n    PARAM_DECLARATOR: function (node) {\n      // check default value\n      if (node.default) {\n        node.default = __evalNode(node.default);\n        var cType = util.typeCheck(node.type, node.default.type, false);\n        if (!cType) {\n          return errorManager.logError(node, node.location, 'type_mismatch', [node.id.name, node.type]);\n        }\n      }\n      return node;\n    },\n    RETURN_STATEMENT: function (node) {\n      node.argument = __evalNode(node.argument);\n      // set return statement type\n      node.type = (node.argument) ? node.argument.type : 'void';\n\n      // check type matches current function\n      var curFunc = funcTable.getCurrentFunc();\n      if (!curFunc.node) {\n        return errorManager.logError(node, node.location, 'return_outside');\n      }\n      var cType = util.typeCheck(node.type, curFunc.node.type);\n      if (!cType) {\n        var errLocation = ( node.argument ) ? node.argument.location : node.location;\n        return errorManager.logError(node, errLocation, 'type_mismatch', [curFunc.node.id.name, curFunc.node.type]);\n      }\n\n      // add return\n      funcTable.funcAddReturn(node);\n\n      return node;\n    },\n    CALL_STATEMENT: function (node) {\n      var cName = node.callee.name;\n      // eval arguments\n      for (var i=0, l=node.arguments.length; i<l; i++) {\n        var cArg = node.arguments[i] = __evalNode(node.arguments[i]);\n      }\n      // dont eval built-in functions\n      if (DEFAULT_FUNCTIONS.hasOwnProperty(cName)) {\n        return node;\n      }\n      // check if function exists\n      var cFunc = funcTable.findFunc(node);\n      if (!cFunc) {\n        return errorManager.logError(node, node.callee.location, 'does_not_exist', [cName]);\n      }\n      // add missing default params\n      if (funcTable.funcHasDefaults(cFunc) && node.arguments.length < cFunc.params.length) {\n        var defParams = cFunc.params.slice(node.arguments.length);\n        for (var i=0, l=defParams.length; i<l; i++) {\n          node.arguments.push(__evalNode(defParams[i].default));\n        }\n      }\n      // assign call statement type\n      node.type = cFunc.type;\n      return node;\n    },\n\n    FOR_STATEMENT: function (node) {\n      symbolTable.enterScope();\n      node.init = __evalNode(node.init);\n      node.test = __evalNode(node.test);\n      node.update = __evalNode(node.update);\n      node.body = __evalNode(node.body);\n      symbolTable.exitScope();\n\n      return node;\n    },\n    BREAK_STATEMENT: function (node) {\n      return node;\n    },\n    CONTINUE_STATEMENT: function (node) {\n      return node;\n    },\n\n\n    EXPRESSION_STATEMENT: function (node) {\n      var newNode = __evalNode(node.expression);\n      return newNode;\n    },\n\n    IDENTIFIER: function (node) {\n      // check if variable exists\n      var varName = node.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (variable) {\n        // assign node type\n        node.type = variable.type;\n      } else {\n        // error\n        return errorManager.logError(node, node.location, 'does_not_exist', [varName]);\n      }\n\n      return node;\n    },\n\n    LITERAL: function(node) {\n      // convert int type\n      if (node.type === 'int') {\n        node.type = util.getIntegerType(node.value);\n      }\n\n      return node;\n    },\n\n    BINARY_EXPRESSION: function (node) {\n      // eval left and right parts first\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n      // assign node type\n      // check types\n      node.type = util.typeCheck(node.left.type, node.right.type);\n      // error\n      if (!node.type) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.operator, node.left.type, node.right.type]);\n      }\n      return node;\n    },\n\n    ASSIGNMENT_STATEMENT: function (node) {\n      // eval asignment right hand side\n      node.right = __evalNode(node.right);\n      // check if variable exists\n      var varName = node.left.name;\n      var variable = symbolTable.findSymbol(varName);\n      if (!variable) {\n        // eval as variable statement instead\n        return __evalNode(util.constructVarDeclarator(node));\n      }\n      // eval left hand side\n      node.left = __evalNode(node.left);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        return errorManager.logError(node, node.left.location, 'type_mismatch', [node.right.type, node.left.type]);\n      }\n\n      return node;\n    },\n\n    ASSIGNMENT_ACTION: function (node) {\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.right.type, node.left.type]);\n      }\n      return node;\n    },\n\n    BLOCK_STATEMENT: function (node) {\n      // increase current scope\n      symbolTable.enterScope();\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n\n      // decrease scope\n      symbolTable.exitScope();\n      \n      return node;\n    },\n\n    PROGRAM: function (node) {\n\n      node.body.forEach(function(item) {\n        item = __evalNode(item);\n      });\n      \n      return node;\n    },\n\n    IF_STATEMENT: function (node) {\n      // parse test condition\n      node.test = __evalNode(node.test);\n      // check test type\n      if (node.test.type !== 'bool') {\n        return errorManager.logError(node, node.test.location, 'not_a_bool');\n      }\n\n      // parse consequent and alternate\n      node.consequent = __evalNode(node.consequent);\n      if (node.alternate) {\n        node.alternate = __evalNode(node.alternate);\n      }\n      return node;\n    },\n\n    LOGICAL_EXPRESSION: function (node) {\n      node.left = __evalNode(node.left);\n      node.right = __evalNode(node.right);\n\n      // check types\n      var cType = util.typeCheck(node.left.type, node.right.type);\n      if (!cType) {\n        // error\n        return errorManager.logError(node, node.location, 'type_mismatch', [node.left.type, node.right.type]);\n      }\n      else if (!util.isEqualityOperator(node.operator) && !util.isNumber(cType)) {\n        // cant compare\n        return errorManager.logError(node, node.location, 'not_a_number', [node.operator]);\n      }\n      return node;\n    },\n\n    UPDATE_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      if (!util.isNumber(node.argument.type)) {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_number');\n      }\n      node.type = node.argument.type; \n      return node;\n    },\n\n    UNARY_EXPRESSION: function (node) {\n      node.argument = __evalNode(node.argument);\n      // check 'not' operator is a boolean\n      if (node.operator === '!' && node.argument.type !== 'bool') {\n        // error\n        return errorManager.logError(node, node.location, 'not_a_bool');\n      }\n      node.type = node.argument.type;\n      return node;\n    }\n\n  };\n\n  // :: SPARK EVALUATOR\n  global.SparkEvaluator = api;\n  return api;\n\n})();\n","module.exports = (function () {\n  // :: ERROR MANAGER\n  'use strict';\n\n  var errorConvertMaps = {\n    operator: {\n      '+' : 'add',\n      '-' : 'subtract',\n      '*' : 'multiply',\n      '/' : 'divide'\n    },\n    typeArticle: {\n      'int'   : 'an',\n      'byte'  : 'a',\n      'long'  : 'a',\n      'float' : 'a',\n      'bool'  : 'a',\n      'str'   : 'a'\n    }\n  };\n\n  var errorMap = {\n    VARIABLE_STATEMENT    : {\n      type_mismatch       :   'variable \"{0}\" does not match type \"{1}\"',\n      already_exists      :   'variable \"{0}\" was already initialized as \\'{1}\\' on line {2}',\n      does_not_exist      :   'variable \"{0}\" is not defined',\n      number_doesnt_fit   :   'number of type \"{0}\" won\\'t fit into {typeArticle: 1} \"{1}\"'\n                            },\n    VARIABLE_DECLARATOR   : {\n      already_initialized :   'variable \"{0}\" was already initialized as {1} on line {2}',\n      already_declared    :   'variable \"{0}\" was already declared on line {1}'\n                            },\n    FUNCTION_DECLARATION  : {\n      already_exists      :   'function \"{0}\" was already declared on line {1}',\n      must_return         :   'function \"{0}\" must return {typeArticle: 1} \"{1}\"',\n      incorrect_params    :   'parameters with default values must be declared last',\n      cant_redeclare      :   'can\\'t re-declare built-in function \"{0}\"'\n                            },\n    CALL_STATEMENT        : {\n      does_not_exist      :   'function \"{0}\" does not exist'\n                            },\n    PARAM_DECLARATOR      : {\n      duplicate_param     :   'duplicate parameter \"{0}\"',\n      type_mismatch       :   'default value for parameter \"{0}\" must be {typeArticle: 1} \"{1}\"'\n                            },\n    RETURN_STATEMENT      : {\n      return_outside      :   'return statement outside function declaration',\n      type_mismatch       :   'return statement type does not match function \"{0}\" of type \"{1}\"'\n                            },\n    IDENTIFIER            : {\n      does_not_exist      :   'variable \"{0}\" does not exist'\n                            },\n    BINARY_EXPRESSION     : {\n      type_mismatch       :   '\"{0}\" operation types do not match, can\\'t {operator: 0} \"{1}\" and \"{2}\"'\n                            },\n    LOGICAL_EXPRESSION    : {\n      type_mismatch       :   'can\\'t compare \"{0}\" and \"{1}\"',\n      cant_compare        :   'can\\'t compare \"{0}\" and \"{1}\"',\n      not_a_number        :   'can use \"{0}\" operator only on numbers'\n                            },\n    ASSIGNMENT_STATEMENT  : {\n      type_mismatch       :   'assignment types mismatch, can\\'t assign \"{0}\" to \"{1}\"'\n                            },\n    ASSIGNMENT_ACTION     : {\n      type_mismatch       :   'assignment types mismatch, can\\'t assign \"{0}\" to \"{1}\"'\n                            },\n    UPDATE_EXPRESSION     : {\n      not_a_number        :   'expression is not a number'\n                            },\n    UNARY_EXPRESSION      : {\n      not_a_bool          :   'unary expression must be a boolean'\n                            },\n    IF_STATEMENT          : {\n      not_a_bool          :   'IF condition must be a boolean'\n                            }\n  };\n\n  // log error\n  var logError = function(node, location, errorType, params) {\n    var errorCategory = (typeof node === 'string') ? node : node['$$'];\n    var errorMessage = errorMap[errorCategory][errorType];\n    // 'parse' error message\n    if (params) {\n      for (var i=0,l=params.length; i<l; i++) {\n        var parameter = params[i];\n        var paramRegexA = new RegExp('\\\\{[ ]*([a-z]+)[ ]*\\\\:[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        var paramRegexB = new RegExp('\\\\{[ ]*'+ i +'[ ]*\\\\}', 'gi');\n        errorMessage = errorMessage.replace(paramRegexA, function (a, b) {\n          var cMap = errorConvertMaps[b];\n          return cMap[params[i]];\n        });\n        errorMessage = errorMessage.replace(paramRegexB, params[i]);\n      }\n    }\n\n    var err = {\n      error: {\n        location: location,\n        message: errorMessage,\n        node: node\n      }\n    }\n\n    return err;\n  }\n\n  // api\n  var api = {\n    logError: logError\n  }\n\n\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: UTILS\n  'use strict';\n  var numberTypeScale = ['byte', 'int', 'long', 'float'];\n  var equalityOperatorMap = ['==', '!=', 'is', 'is not'];\n  var signedIntegerLimits = {\n    'byte': 128,\n    'int': 32767,\n    'long': 2147483647\n  };\n  \n  var api = {\n    constructVarDeclarator: function (node) {\n      node['$$'] = 'VARIABLE_STATEMENT';\n      node.type = node.right.type;\n      node.declarations = [\n        {\n          '$$': 'VARIABLE_DECLARATOR',\n          'id': {\n            'location': node.left.location,\n            '$$': 'IDENTIFIER',\n            'name': node.left.name\n          },\n          'location': node.left.location,\n          'init': node.right\n        }\n      ];\n\n      return node;\n    },\n    typeCheck: function (leftType, rightType, strict) {\n      if (strict) {\n        return leftType === rightType;\n      }\n      if (!leftType || !rightType) {\n        return false;\n      }\n      // types match - return\n      if (leftType === rightType) {\n        return leftType;\n      }\n\n      // check numbers\n      var iLeft = numberTypeScale.indexOf(leftType);\n      if (iLeft > -1) {\n        var iRight = numberTypeScale.indexOf(rightType);\n        if (iRight > -1) {\n          // promote left type\n          if (iLeft < iRight) {\n            leftType = rightType;\n          }\n          return leftType;\n        }\n        // left is number, right is not\n        return false;\n      }\n\n      return false;\n    },\n    getParameters: function (paramArray) {\n\n    },\n    checkParamDuplicates: function (params) {\n      for (var i=1,l=params.length; i<l; i++) {\n        var curPram = params[i];\n        for (var j=0; j<i; j++) {\n          var prvParam = params[j];\n          if (prvParam.id.name === curPram.id.name) {\n            return curPram;\n          }\n        }\n      }\n      return false;\n    },\n    isNumber: function (type) {\n      return numberTypeScale.indexOf(type) > -1;\n    },\n    compareNumberTypes: function (typeA, typeB) {\n      var nA = numberTypeScale.indexOf(typeA);\n      var nB = numberTypeScale.indexOf(typeB);\n      if (nA > -1 && nB > -1) {\n        return nA - nB;\n      }\n      else {\n        return -100; // something went wrong, check nA/nB\n      }\n    },\n    isEqualityOperator: function (operator) {\n      return equalityOperatorMap.indexOf(operator) > -1;\n    },\n    getIntegerType: function (number) {\n      var nmb = parseInt(number, 10);\n      var a_nmb = Math.abs(nmb);\n\n      var resType = 'int';\n      var last = signedIntegerLimits['long'];\n\n      for (var nType in signedIntegerLimits) {\n        if (signedIntegerLimits.hasOwnProperty(nType)) {\n          var limit = signedIntegerLimits[nType];\n          if (a_nmb <= limit && last >= limit) {\n            resType = nType;\n            last = limit;\n          }\n        }\n      }\n\n      return resType;\n    }\n  };\n  // :: EXPORT\n  return api;\n\n})();","module.exports = (function () {\n  // :: FUNCTION TABLE\n  'use strict';\n\n  var table = {};\n  var currentFunc = {\n    node: null,\n    returns: []\n  };\n\n  // @TODO: REFACTOR!  \n  var numberTypes = ['byte', 'int', 'long', 'float'];\n  var isNumber = function (type) {\n    return numberTypes.indexOf(type) > -1;\n  }\n  \n  var api = {\n    getTable: function () {\n      return table;\n    },\n\n    reset: function () {\n      table = {};\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    getCurrentFunc: function () {\n      return currentFunc;\n    },\n\n    enterFunc: function (node) {\n      currentFunc.node = node;\n    },\n\n    exitFunc: function () {\n      currentFunc = {\n        node: null,\n        returns: []\n      };\n    },\n\n    funcAddReturn: function (node) {\n      currentFunc.returns.push(node);\n    },\n\n    getSignature: function (node) {\n      var cId = node.id || node.callee;\n      var params = node.params;\n      if (node['$$'] === 'CALL_STATEMENT') {\n        params = node.arguments;\n      } \n      var result = cId.name + '__';\n      var reachedDefaultParam = false;\n      var paramTypes = [];\n      for (var i=0, l=params.length; i<l; i++) {\n        var cParam = params[i];\n        if ( !reachedDefaultParam && cParam.default) {\n          result += '|'; // separate default params with pipes\n          reachedDefaultParam = true;\n        }\n        var paramType = isNumber(cParam.type) ? 'num' : cParam.type;\n        result += paramType + '_';\n      }\n      return result;\n    },\n\n    getParams: function (params) {\n      var result = [];\n      for (var i=0,l=params.length;i<l;i++) {\n        var pr = params[i];\n        result.push({\n          type: pr.type,\n          name: pr.id.name,\n          default: pr.default\n        });\n      }\n      return result;\n    },\n\n    funcHasDefaults: function (func) {\n      return func.signature.match(/\\|/) !== null;\n    },\n\n    findFunc: function (node) {\n      var cId = node.id || node.callee;\n      var name = cId.name;\n      var signature = api.getSignature(node);\n      if (table.hasOwnProperty(name)) {\n        var tableFunc = table[name];\n        for (var i=0, l=tableFunc.length; i<l; i++) {\n          var cFunc = tableFunc[i];\n          if (cFunc.signature === signature) {\n            return cFunc; \n          }\n          else if (api.funcHasDefaults(cFunc)) {\n            // @TODO: REFACTOR!\n            var sigSplit = cFunc.signature.split('|');\n            var sigStart = sigSplit[0]; \n            var sigRest = sigSplit[1].split('_').slice(0, -1);\n            for (var j=0, ll=sigRest.length; j<=ll; j++) {\n              var sigTmp = sigStart + sigRest.slice(0, j).join('_');\n              if (sigTmp[sigTmp.length - 1] !== '_') {\n                sigTmp += '_';\n              }\n              if (sigTmp === signature) {\n                return cFunc;\n              }\n            }\n          }\n        }\n      }\n      return null;\n    },\n\n    addFunc: function (node) {\n      var signature = api.getSignature(node);\n      var name = node.id.name;\n      var type = node.type;\n      var params = api.getParams(node.params);\n      var initLine = node.location.start.line;\n      var doc = (node.doc) ? node.doc.body : \"\";\n\n      if (! table[name] ) {\n        table[name] = [];\n      }\n\n      var func = {\n        signature: signature,\n        type: type,\n        params: params,\n        initLine: initLine,\n        doc: doc,\n        node: node\n      };\n\n      table[name].push(func);\n\n      return func;\n    }\n  }\n  // :: EXPORT\n  return api;\n\n})();\n","module.exports = (function () {\n  // :: SYMBOL TABLE\n  'use strict';\n\n  var initialScope = require('../../common/constants').DEFAULT_CONSTANTS;\n\n  var scopePointer = 1;\n  var table = {\n    sc0: initialScope,\n    sc1: {}\n  };\n  var currentScope = table['sc' + scopePointer];\n\n  var api = {\n\n    setInitialScope: function (scope) {\n      initialScope = scope;\n      api.reset();\n    },\n\n    getTable: function() {\n      return table;\n    },\n\n    reset: function () {\n      scopePointer = 1;\n      table = {\n        sc0: initialScope,\n        sc1: {}\n      };\n      currentScope = table['sc' + scopePointer];\n    },\n\n    enterScope: function () {\n      scopePointer += 1;\n      table['sc' + scopePointer] = {};\n      currentScope = table['sc' + scopePointer];\n    },\n\n    exitScope: function () {\n      if (scopePointer > 1) {\n        table['sc' + scopePointer] = null;\n      }\n      scopePointer -= 1;\n      currentScope = table['sc' + scopePointer];\n    },\n\n    getScope: function (num) {\n      var scNum = (typeof num !== 'udefined') ? num : scopePointer;\n      return table['sc' + scNum];\n    },\n\n    findSymbol: function (name) {\n      for (var i = scopePointer; i >= 0; i--) {\n        var tempScope = api.getScope(i);\n        if (tempScope.hasOwnProperty(name)) {\n          return tempScope[name];\n        }\n      }\n      return null;\n    },\n\n    addSymbol: function (symbol, it) {\n      var init = it || symbol.init;\n      var name = symbol.id.name;\n      var value = init.value;\n      var type = init.type;\n      var initLine = symbol.location.start.line;\n\n      currentScope[name] = {\n        name: name,\n        value: value,\n        type: type,\n        initLine: initLine\n      };\n    },\n\n    checkScope: function (name) {\n      if (currentScope.hasOwnProperty(name)) {\n        return currentScope[name];\n      } else {\n        return false;\n      }\n    }  \n  }\n\n  // :: EXPORT\n  return api;\n  \n})();"]}